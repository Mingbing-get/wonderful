import { MARROW_ID_NAME, OUTER_ID } from './constants';
import { Marrow, StartStyle } from '@marrow/global';
import React from 'react';
export { MARROW_ID_NAME, OUTER_ID };
export declare function getMarrowIdsByLocation(x: number, y: number): string[];
export declare function isElementButNotBodyOrHtml(element: Element): element is HTMLElement;
export declare function eachMarrow(data: Marrow[], fn: (marrow: Marrow) => boolean | void): void;
export declare function eachMarrowByHasChildren(data: Marrow[], fn: (marrow: Marrow, index: number, parent?: Marrow) => boolean | void): void;
export declare function getMarrowById(data: Marrow[], id: string): Marrow | undefined;
export declare function getMarrowsByIds(data: Marrow[], ids: string[]): Marrow[];
export declare function getAllIncludeChildren(data: Marrow[]): Marrow[];
export declare function getCurrentMarrowParentId(data: Marrow[], curMarrowId: string): string;
export declare function replaceMarrow(data: Marrow[], id: string, newMarrow?: Marrow): boolean;
export declare function appendChildren(marrow: Marrow, willAppendMarrow: Marrow): boolean;
export declare function getMarrowName(marrow: Marrow): string;
export declare function getMaxZIndex(data: Marrow[]): number;
export declare function getMinZIndex(data: Marrow[]): number;
export declare function changeObjectByPath<T extends Record<string, any>>(object: T, path: (string | number)[], value: any): T;
export declare function replaceUnit(str: string): string;
export declare function mergeTransform(style?: StartStyle): React.CSSProperties | undefined;
export declare function createStyle(style?: StartStyle): string;
export declare function upperToMiddleLine(str: string): string;
export declare function stopPropagation(e: React.MouseEvent, handle?: (e: React.MouseEvent) => void): boolean;
export declare function hasChildren(marrow: Marrow): boolean;
export declare function generateId(): string;
export declare function getBuildContainer(): HTMLElement;
