export declare type AudioEventType = 'changeBuffer' | 'end' | 'loopEnd';
export declare type AudioChangeCurrentTime = 'changeCurrentTime';
export declare type AudioListener = (audioCtx: AudioContext, sourceNode: AudioBufferSourceNode, analyser: AnalyserNode) => void;
export declare type AudioChangeCurrentTimeListener = (currentTime: number) => void;
export declare type AudioListenerMap = Record<AudioEventType, AudioListener[]> & Record<AudioChangeCurrentTime, AudioChangeCurrentTimeListener[]>;
export declare type StatusType = 'pause' | 'running' | 'suspended' | 'end' | 'loading';
export default class AudioController {
    private audioCtx;
    private sourceNode;
    private analyser;
    private listenerMap;
    private totalTime;
    private currentTime;
    private status;
    private tempStatus;
    private loop;
    private startTime?;
    private lastStartTime;
    private playingTimer?;
    constructor();
    private createSourceNode;
    private beforeChangeBuffer;
    private afterChangeBuffer;
    addAudioBySrc(src: string): Promise<unknown>;
    addAudioByFile(file: File): Promise<unknown>;
    decodeAudioFromArrayBuffer(buffer: ArrayBuffer): Promise<unknown>;
    addAudioBuffer(audioBuffer: AudioBuffer): void;
    selectParagraph(start: number, end: number): void;
    deleteParagraph(start: number, end: number): void;
    insertAudio(location: number, channel1Data: Float32Array, channel2Data: Float32Array): void;
    getContext(): AudioContext;
    getSourceNode(): AudioBufferSourceNode;
    getAnalyser(): AnalyserNode;
    getTotalTime(): number;
    getCurrentTime(): number;
    getLoop(): boolean;
    setLoop(loop: boolean): void;
    start(): void;
    restart(): void;
    pause(): void;
    seek(time: number): void;
    private watchPlaying;
    private changeBuffer;
    addListener(eventType: AudioChangeCurrentTime, listener: AudioChangeCurrentTimeListener): void;
    addListener(eventType: AudioEventType, listener: AudioListener): void;
    trigger(eventType: AudioEventType): void;
    triggerChangeCurrentTime(): void;
}
